= Lisp入门笔记 =
%toc
== 语法和语义 ==
Lisp语法语义层面的东西真的很“简单”，Lisp的求值过程包含两步：
# 文本翻译成S-expression as Lisp forms
# 对Lisp forms求值

=== S-expression ===
由atom和list组成的表达式
- list是包含在小括号里的，由空格分开的一组元素 
    * list的元素可以是其他list或atom——即list的元素也是S-expression
    * 这就是数据结构中学到过的广义表
- atom是除了list以外的所有
    * Number, String
    * Symbol
    * Keyword

=== Lisp Form ===
Lisp form是包含语义的S-expression，是符合一定规则的S-expression。
任何atom和第一个元素是symbol的list都是合法的Lisp form 

=== Lisp的求值规则 ===
==== atom ====
* Symbol求值得到Symbol当前的值
* 其他atom本身就是值

==== list ====
* 函数调用（function call）
    - 形如(function-name argument*)
    - 别的语言中的有一些表达式在Lisp里其实是函数调用
        * (+ 2 3)
        * (* 10 10)
        * 把+, *等当成是函数名就好理解多了,不要将其当作是后缀表达式
* 特殊操作符（special operator）
    - 典型的如if，无法当作函数调用处理，因为有部分求值的需要
        * (if test-form then-form [else-form]) 
    - 求值规则因操作符而异
    - quote操作符（可以简写成一个单引号：'）
        * 不求值，直接返回参数
* 宏（macros）
    - 传递给宏的S-expression不会被求值
    - 宏处理后返回的S-expression被替换到宏调用处并被求值

=== 关于True和False ===
* 符号NIL是False，其他一切都是True
    - NIL既是atom，又是list——空list
* 符号T是常被用来表达True

== 函数 ==
=== 可选参数（&optional） ===
- 参数列表中&optional后面的参数都是可选的，但仍然按照顺序匹配
- 可选参数的默认值是NIL
- 可以将参数写成二元组来指定默认值
    - 默认值可以引用前面出现过的参数
- 可以写成三元组，最后一个元素表示该参数的值是否为默认值
    - 此变量通常的命名规则是参数名后加上-supplied-p
{{{class="brush: lisp;"
(defun make-rectangle 
    (width &optional (height width height-supplied-p))
    ...)
}}}
=== 其他参数（&rest） === 
- 类似Python的*args
- 包含所有其他参数的列表

=== 关键字参数（&key） ===
- 在函数定义处的写法和&optional一样
- 调用函数的地方必须加上同名的字面常量（冒号开头）
{{{class="brush: lisp;"
(defun hello (&key a b c)
    ...)
(hello :a "a-value")
(hello :b 100)
}}}
- 可以改变关键字的值：将参数名替换成一个二元组，前面是关键字，后面是参数名
{{{class="brush: lisp;"
(defun foo 
    (&key ((:apple a)) ((:box b) 0) ((:charlie c) 0 c-supplied-p))
    (list a b c c-supplied-p))
}}}

=== 多种参数的混合 ===
- 应该按照required，optional，rest，key的顺序定义
- 不要将optional和key混用，会带来一些意料之外的错误
- rest和key混用，参数会被两者都收集到。
{{{class="brush: lisp;"
(defun foo (&rest rest &key a b c) (list rest a b c))
(foo :a 1 :b 2 :c 3)  ==> ((:A 1 :B 2 :C 3) 1 2 3)
}}}

=== 函数返回值 ===
- 用RETURN-FROM来从函数体中返回
    - 需要显式带上函数名

=== 高阶函数 ===
- 用function操作符来获取一个函数对象
    - 简写#'
- 用FUNCALL和APPLY来调用一个函数
    - FUNCALL和直接调用一个函数差不多，需要显式指定参数
    - APPLY可以将列表展开成为参数传递进函数
        - 类似Python里foobar(*args)这种用法
        - 可以混用两种参数传递方法
{{{class="brush: lisp;"
(defun plot (fn min max step)
  (loop for i from min to max by step do
        (loop repeat (funcall fn i) do (format t "*"))
        (format t "~%")))
(apply #'plot #'exp plot-data) ;#'exp是第一个参数fn，其他参数则由plot-data展开得到
}}}

=== 匿名函数 ===
- 匿名函数可以用来创建“闭包”
- 所谓的“闭包”是指这样的函数可以部分地捕获其创建处的环境（局部变量等）
    - 详见变量部分

== 变量 ==
=== 函数参数 ===
每次调用时绑定的局部变量

=== LET操作符 ===
基本形式如下：
{{{class="brush: lisp;"
(let (variable*)
  body-form*)
}}}
- variable部分指定一个或多个变量及其初始值（默认是NIL）
- body-form是这些变量作用域内的语句
- let可以嵌套，如果有同名变量，以form最靠近的let为准

=== Binding Form ===
defun，let，dotimes等包含参数以及body的form都被成为binding form。
binding form中定义的变量只在对应的body中有效。这个规则在其他大部分编程语言如Python，Java等都一样。

=== 闭包(Closure) ===
简而言之就是嵌套的函数可以捕捉其所在的lexical scope的上下文环境，使其和函数绑定，并在
超出相应的scope以后（比如外层函数返回以后）仍然有效。
    - 所以把闭包和匿名函数等同是不对的……
另外要注意的是，捕捉到的是context，而不是变量的值。

=== 动态变量(Dynamic or Special Variables) ===
* 变量相当于其他语言的全局变量，但更好用也更容易管理（we'll see）
* 用defvar和defparameter来定义动态变量
{{{class="brush: lisp;"
(defvar *count* 0
  "Count of widgets made so far.")

(defparameter *gap-tolerance* 0.001
  "Tolerance to be allowed in widget gaps.")
}}}
* 通常的命名规则是前后都加上*（很重要！）
* defvar和defparameter的区别在于前者只在检查到变量未绑定时才赋予初值，而后者总是赋予初值。
{{{class="brush: lisp;"
(defvar *a* 1)
(defvar *a* 3)
*a* ;结果是1
(defparameter *b* 1)
(defparameter *b* 3)
*b* ;结果是3
}}}
* 称之为动态变量的重要原因是可以对其做rebind，在一个scope内改变它的值，而在出了该scope以后恢复原来的绑定。
    - 绑定像是一个堆栈，总是使用栈顶的绑定 
    - 改变当前绑定下的值不会影响到上层/下层绑定
{{{class="brush: lisp;"
(defvar *val* 10)
(defun print_val () (format t "Value is: ~d~%" *val*))
(print_val)
(let ((*val* 20)) (print_val))
(print_val)
}}}
    - 运行结果：
{{{class="brush: plain;"
Value is: 10
Value is: 20
Value is: 10
}}}
* 任何需要变量绑定的地方都可以使用动态变量：let，函数参数等等。
    - 所以命名很重要，必须要在前后加上*
{{{class="brush: plain;"
This means whenever you use such a name in a binding form--in a LET or as a function parameter 
or any other construct that creates a new variable binding--the binding that's created will 
be a dynamic binding. 
}}}

=== 常量(constants) ===
* 用defconstant来定义常量
* 命名风格是前后加上+（但不像动态变量的命名规则那样流行）

=== 赋值 ===
* 通用的赋值操作符：setf
* 可以对局部变量和动态变量使用，且只影响当前绑定
* 要赋予的值同时也是setf操作符的返回值
* setf可以同时对多个变量赋值
    - 这种情况setf的返回值是最后一个变量的值
{{{class="brush: lisp;"
(let (a b)
  (format t "setf a and b: ~d~%" (setf a 1 b 2)))
}}}
    - 运行结果：
{{{class="brush: plain;"
setf a and b: 2
}}}
* setf就像其他语言的赋值操作符=，能用在几乎所有需要复制的地方
    - 数组，哈希表
* 用于赋值的，基于setf的其他宏：
    - incf, decf自增，自减
    - rotatef交换变量的值
    - shiftf从右到左移动变量的值

== 宏：标准控制结构 ==
=== when和unless ===
- 相当于其他语言的if和if not
- 解决if的then和else部分只能包含单一form的问题
{{{class="brush: lisp;"
(defmacro when (condition &rest body)
  `(if ,condition (progn ,@body)))
  
(defmacro unless (condition &rest body)
  `(if (not ,condition) (progn ,@body)))
}}}

=== cond ===
* 解决嵌套if的ugly写法
* 基本形式如下：
{{{class="brush: lisp;"
(cond (a (do-x))
      (b (do-y))
      (t (do-z)))
}}}
* 嵌套if中最后一个else在cond中通常表现为一个T加对应的表达式

=== and, or和not ===
* and, or是宏，not其实是函数
* and和or支持短路求值
    - and在遇到第一个NIL时停止求值并返回NIL，所有都非NIL则返回最后一个form的值
    - or在遇到第一个非NIL时停止求值并返回对应form的值，所有的都是NIL则返回NIL

=== Lisp中的循环结构概述 ===
* 语言核心只有基本的跳转操作符
* 构建在核心上的基础循环结构do
* 构建在do之上的有dolist和dotimes，一个用来遍历列表，一个用来做计数循环
* loop，有人恨有人爱，几乎可以成为一个迷你语言

=== dolist和dotimes ===
* dolist遍历列表，将列表的元素绑定到指定变量上并执行body form
{{{class="brush: lisp;"
(dolist (var list-form)
  body-form*)
}}}
* dolist的返回值是NIL
* dotimes将0到count-1绑定到指定的变量上并执行body form
{{{class="brush: lisp;"
(dotimes (var count-form)
  body-form*)
}}}
* 可以用return从dolist和dotimes中返回

=== do ===
do循环类似其他语言里的for循环，可以定义变量的初值，循环的测试条件以及变量的更新语句，
但是do更强大并且看起来也更复杂。
do的结构是这样的：
{{{class="brush: lisp;"
(do (variable-definition*)
    (end-test-form result-form*)
  statement*)
}}}

其中variable-definition部分定义变量及其初值、步长。这部分的规则是：
{{{class="brush: lisp;"
(var init-form step-form)
}}}
* init-form是在do开始的时候求值并绑定给对应变量，如果不存在，变量的值是NIL
* step-form在每一次循环结束后求值， 其结果会被赋值给对应变量
* step-form是可选的，如果不存在则变量的值不会被do改变，但是body-form里可以改变变量的值

每次循环开始，变量被赋予值以后，end-test-form会被求值，如果结果是NIL，循环继续，
按顺序求值statement部分的form；如果结果不是NIL，result-form会被求值，
其结果会被作为do的返回值，同时do结束。

do的结构让人看着十分眼晕，一定要看清楚括号………………

do的几个简单例子（摘自Practical Common Lisp）
* 没有body-form的斐波那契数列计算表达式
{{{class="brush: lisp;"
(do ((n 0 (1+ n))
     (cur 0 next)
          (next 1 (+ cur next)))
    ((= 10 n) cur))
}}}
* 没有绑定任何变量的do循环(类似其他语言while的用法？)
{{{class="brush: lisp;"
(do ()
    ((> (get-universal-time) *some-future-date*))
  (format t "Waiting~%")
  (sleep 60)) 
}}}

=== 强大的loop ===
loop宏定义了一套相对独立的迷你语言，用非常容易理解的方式来定义复杂的循环行为。
* Python的列表解析八成从Lisp的loop宏抄的
{{{class="brush: lisp;"
(loop for i from 1 to 10 collecting i) ==> (1 2 3 4 5 6 7 8 9 10)
}}}
* 在Lisper中有人爱，有人恨
    - 恨他的理由是不够Lispy（括号不够多……）
==== 一些例子 ====
* 计算一句话中元音字母（aeiou）的数量
{{{class="brush: lisp;"
(loop for x across "the quick brown fox jumps over the lazy dog"
      counting (find x "aeiou")) ==> 11
}}}

* 计算斐波那契数列第11个元素
{{{class="brush: lisp;"
(loop for i below 10
      and a = 0 then b
      and b = 1 then (+ b a)
      finally (return  a))
}}}

== 自定义宏 ==
宏是用来产生代码的函数，它在编译期间运行（宏展开）。只有一个程序中所有的宏都被展开了，产生的中间代码都被编译了，
才能进入程序实际的运行期。因此，在宏展开的时候是无法访问只有运行期才存在的数据。

关于宏最核心的是：**编译器将未求值的Lisp form（代码）传给宏，宏返回的处理过的Lisp form（代码）**

=== 定义宏的通常步骤 ===
# 识别出重复代码，并想出来用宏来替代的方式
# 写出一个宏调用的例子，并写出其展开后的样子
# 根据这个例子来写宏的实现
# 确保宏带来的抽象不会泄漏

=== 宏的参数 ===
==== Destructuring Parameters ====
除了支持和普通函数一样的参数写法，宏还支持destructuring parameters。
destructuring parameter有点类似Python里的元组展开。
假如有以下宏，其中第一个参数是代表条件的一个Lisp form（就是一个list）。
在宏的body里可能需要从这个list里提取不同的部分而不是将其作为一个整体，这种情况下为了方便宏的编写，
可以把condition替换成destructuring parameter的写法，省去了在body中用first，second之类的操作符来获取form中的元素。
{{{class="brush: lisp;"
(defmacro foobar (condition &rest body)
  ...)
}}}
可以替换成如下写法：
{{{class="brush: lisp;"
(defmacro foobar ((op val1 val2) &rest body)
  ...)
}}}
其中op, val1, val2分别绑定到了condition form的第一、第二和第三个元素上了。
闭着眼睛都能想象，destructuring parameters可以极大简化宏的编写。

destructuring parameters的另一个好处是它无形中给宏的对应参数多加了一个约束：即对应的form里的元素个数。
在宏展开的时候如果form中的元素个数不匹配，Lisp编译器会报错。比如代表变量初始化的form最多不会超过3个元素，
且必须至少包含一个元素。问题来了，可变的destructing parameters要怎么定义？

答案是：destructuring parameters也支持&optional, &key和&rest参数

==== &body ====
宏的参数列表中可以用&body，它和&rest含义是一样的。因为宏函数里的其他参数一般都会是宏的body forms，
所以通常用&body来标示body forms参数。

=== 宏展开表达式的生成 ===
用backquote表达式来生成Lisp form。
backquote（符号`）和普通的quote（'）的唯一区别就是在backquote表达式中可以用逗号（,）来unquote部分表达式。
* unquote的含义就是将符号的值替换进去，而不用符号本身
* unquote的逗号后面可以跟上一个@符号，此时符号的值必须是个list，此list会被展开到backquote表达式的同一级。
    - 解释起来太拗口，上例子
{{{class="brush: lisp;"
#Backquote Syntax      Equivalent List-Building Code            Result
#------------------------------------------------------------------------------
`(a (+ 1 2) c)         (list 'a '(+ 1 2) 'c)                    (a (+ 1 2) c)
`(a ,(+ 1 2) c)        (list 'a (+ 1 2) 'c)                     (a 3 c)
`(a (list 1 2) c)      (list 'a '(list 1 2) 'c)                 (a (list 1 2) c)
`(a ,(list 1 2) c)     (list 'a (list 1 2) 'c)                  (a (1 2) c)
`(a ,@(list 1 2) c)    (append (list 'a) (list 1 2) (list 'c))  (a 1 2 c)
}}}

=== 宏定义要注意的问题 ===
* 宏展开后的form中引用的sub form，要和传递时的顺序一致，不然可能会产生期望之外的结果
    - 通常是在form有副作用或者互相有引用关系的时候
* 要确保sub form在展开后的form中只被求值一次
* 用GENSYM来生成变量名，防止命名冲突带来的bug

=== 用来生成宏的宏(macro-writing macro) ===
好眼晕……等用到的时候再研究。
* 只是再增加一级抽象
* 记住宏就是用来生成结构相似的代码的——宏定义本身也是代码，相似的部分一样可以抽象成宏
