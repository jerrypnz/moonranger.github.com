= Lisp入门笔记 =
%toc
== Syntax and Semantics ==
Lisp语法语义层面的东西真的很“简单”
* Lisp的求值过程包含两步：1. 文本翻译成S-expression as Lisp forms, 2. Evaluate Lisp forms
* S-expression：由atom和list组成的表达式
    - list是包含在小括号里的，由空格分开的一组元素 
        * list的元素可以是其他list或atom——即list的元素也是S-expression
        * 这就是数据结构中学到过的广义表
    - atom是除了list以外的所有
        * Number, String
        * Symbol
        * Keyword
* Lisp form是包含语义的S-expression，是符合一定规则的S-expression
    - 任何atom和第一个元素是symbol的list都是合法的Lisp form 
* Lisp的求值规则
    - atom
        * Symbol求值得到Symbol当前的值
        * 其他atom本身就是值
    - list
        * 函数调用（function call）
            - 形如(function-name argument*)
            - 别的语言中的有一些表达式在Lisp里其实是函数调用
                * (+ 2 3)
                * (* 10 10)
                * 把+, *等当成是函数名就好理解多了,不要将其当作是后缀表达式
        * 特殊操作符（special operator）
            - 典型的如if，无法当作函数调用处理，因为有部分求值的需要
                * (if test-form then-form [else-form]) 
            - 求值规则因操作符而异
            - quote操作符（可以简写成一个单引号：'）
                * 不求值，直接返回参数
        * 宏（macros）
            - 传递给宏的S-expression不会被求值
            - 宏处理后返回的S-expression被替换到宏调用处并被求值
    - 关于True和False
        * 符号NIL是False，其他一切都是True
            - NIL既是atom，又是list——空list
        * 符号T是常被用来表达True

== Functions ==
* 可选参数（&optional）
    - 参数列表中&optional后面的参数都是可选的，但仍然按照顺序匹配
    - 可选参数的默认值是NIL
    - 可以将参数写成二元组来指定默认值
        - 默认值可以引用前面出现过的参数
    - 可以写成三元组，最后一个元素表示该参数的值是否为默认值
        - 此变量通常的命名规则是参数名后加上-supplied-p
{{{class="brush: lisp;"
(defun make-rectangle 
    (width &optional (height width height-supplied-p))
    ...)
}}}
* 其他参数（&rest） 
    - 类似Python的*args
    - 包含所有其他参数的列表
* 关键字参数（&key）
    - 在函数定义处的写法和&optional一样
    - 调用函数的地方必须加上同名的字面常量（冒号开头）
{{{class="brush: lisp;"
(defun hello (&key a b c)
    ...)
(hello :a "a-value")
(hello :b 100)
}}}
    - 可以改变关键字的值：将参数名替换成一个二元组，前面是关键字，后面是参数名
{{{class="brush: lisp;"
(defun foo 
    (&key ((:apple a)) ((:box b) 0) ((:charlie c) 0 c-supplied-p))
    (list a b c c-supplied-p))
}}}
