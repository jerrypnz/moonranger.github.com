= !InnoDB Locking =

!InnoDB引擎支持两种行锁：共享锁和独占锁

== 共享锁（读锁） ==

仅允许事务对行做读操作，多个事务可以同时获得某一行的共享锁。
当对含有外键的记录做insert，update操作的时候，会对引用表的相应行
加共享锁。
select ... lock in share mode也可以对某一行加共享锁

== 独占锁（写锁） ==

允许事务对行做更新、删除操作，同一时间只能有一个事务持有某一行的独占锁。

== 一个死锁的Case ==
A表的b_id引用了B的主键id，按以下序列执行会出现死锁的情况(t1, t2分别为两个事务）：

{{{class="brush: sql;"
t1: insert into A(xxx, b_id)  values('xxx_value_1', 1)            OK
t2: insert into A(xxx, b_id)  values('xxx_value_2', 1)            OK
t1: update B set yyy='yyy_value1' where id=1                      Wait
t2: update B set yyy='yyy_value2' where id=1                      Deadlock
}}}

分析：
 # t1 insert的时候会对B(id=1)这条记录加共享锁，以确保这条记录不会被删掉或更新
 # t2 insert的时候也能拿到B(id=1)这条记录的共享锁
 # t1 update的时候需要等待t1, t2持有的共享锁
 # t2 update的时候也需要等待t1, t2持有的共享锁
此时t1, t2都在等对方的那个共享锁的释放，而update的等待又导致这两个共享锁无法释放，
最终就构成了死锁。
测试的结果是t2会成为死锁中的失败者而回滚。




